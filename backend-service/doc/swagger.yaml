openapi: 3.0.3
info:
  title: Dell Technologies Resource Management Application Backend API Documentation
  description: >-
    This is the backend API documentation and specifcation for the Dell Technologies Resource Management Web Application, and it is based on the OpenAPI 3.0 specification.


    The API is a RESTful API service which we designed and built to allow us to perform CRUD operations on data stored on a MongoDB Server.


    This application is built using the following technolgoies:

    - [React.js](https://react.dev/)

    - [Node.js](https://nodejs.org/en)

    - [Express.js](https://expressjs.com/)

    - [MongoDB](https://www.mongodb.com/)

    - [Docker](https://www.docker.com/)

    - [Swagger.io](https://swagger.io/)


    This application is built to manage resources much easier 
    and more efficiently helping the organisation to keep 
    track and manage resources more easily. 


    It is built using the MERN stack and it is a full-stack 
    application which can be easily deployed with the help 
    of Docker deployment. We also utilised React.js as a 
    frontend framework which works well with Express.js and 
    Node.js as the backend server. For the database, we have
    used MongoDB, since it is a NoSQL database, it allows 
    for much more flexibility as well as scalability.
    Lastly, for the ease of testing and documentation, we 
    have utilised Swagger.io to document our API endpoints.


    For more information about the application and usage of
    the application, please refer to the README.md file. 
    For usage of the API, please refer to the API documentation
    below.


    For further information, please refer to the links below:

  termsOfService: http://swagger.io/terms/
  contact:
    email: "vancence_ho@mymail.sutd.edu.sg"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000
    description: Backend Development Server
tags:
  - name: admin
    description: Operations for admin
  - name: trainer
    description: Operations for trainer
  - name: client
    description: Operations about client
  - name: workshopRequest
    description: Access operations to workshop requests
  - name: leaveRequest
    description: Access operations to leave requests
paths:
  /admin/getAdmins:
    get:
      tags:
        - admin
      summary: Get all admin users
      description: Get all admin users
      operationId: getAllAdmin
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Admin"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Admin"
        "500":
          description: "Error Fetching Admins: Internal Server Error"
  /admin/createAdmin:
    post:
      tags:
        - admin
      summary: Create a new admin user
      description: Create a new admin user
      operationId: createAdmin
      requestBody:
        description: Create a new admin user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Admin"
          application/xml:
            schema:
              $ref: "#/components/schemas/Admin"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Admin"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
            application/xml:
              schema:
                $ref: "#/components/schemas/Admin"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /client/getClients:
    get:
      tags:
        - client
      summary: Get all client users
      description: Get all client users
      operationId: getAllUsers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Client"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Client"
        "500":
          description: "Error Fetching Clients: Internal Server Error"
  /client/createClient:
    post:
      tags:
        - client
      summary: Create a new client user
      description: Create a new client user
      operationId: createUser
      requestBody:
        description: Create a new client user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Client"
          application/xml:
            schema:
              $ref: "#/components/schemas/Client"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Client"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
            application/xml:
              schema:
                $ref: "#/components/schemas/Client"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        "500":
          description: "Error Creating Client: Internal Server Error"
  /trainer/getTrainers:
    get:
      tags:
        - trainer
      summary: Get all trainer users
      description: Get all trainer users
      operationId: getAllTrainers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trainer"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trainer"
        "500":
          description: "Error Fetching Trainers: Internal Server Error"
  /trainer/get/{trainerId}:
    get:
      tags:
        - trainer
      summary: Get a trainer by ID
      description: Get a trainer by ID
      operationId: getTrainerById
      parameters:
        - name: trainerId
          in: path
          description: ID of Trainer to return
          required: true
          schema:
            type: string
            description: MongoDB ObjectID as a hexadecimal string.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trainer"
            application/xml:
              schema:
                $ref: "#/components/schemas/Trainer"
        "404":
          description: Trainer not found
        "500":
          description: "Error Retrieving Trainer: Internal Server Error"
  /trainer/createTrainer:
    post:
      tags:
        - trainer
      summary: Create a new trainer user
      description: Create a new trainer user
      operationId: createTrainer
      requestBody:
        description: Create a new trainer user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trainer"
          application/xml:
            schema:
              $ref: "#/components/schemas/Trainer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Trainer"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trainer"
            application/xml:
              schema:
                $ref: "#/components/schemas/Trainer"
        "400":
          description: All fields are required
        "409":
          description: Trainer Username already exists
        "500":
          description: "Error Creating Trainer: Internal Server Error"
  /trainer/update/{trainerId}:
    put:
      tags:
        - trainer
      summary: Update a trainer by ID
      description: Update a trainer by ID
      operationId: updateTrainer
      parameters:
        - name: trainerId
          in: path
          description: ID of Trainer to update
          required: true
          schema:
            type: string
            description: MongoDB ObjectID as a hexadecimal string.
      requestBody:
        description: Update an existent trainer user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trainer"
          application/xml:
            schema:
              $ref: "#/components/schemas/Trainer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Trainer"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trainer"
            application/xml:
              schema:
                $ref: "#/components/schemas/Trainer"
        "400":
          description: Invalid input
        "401":
          description: No authorization token provided
        "404":
          description: Trainer not found
        "500":
          description: "Error Updating Trainer: Internal Server Error"
  /trainer/delete/{trainerId}:
    delete:
      tags:
        - trainer
      summary: Delete a trainer by ID
      description: Delete a trainer by ID
      operationId: deleteTrainer
      parameters:
        - name: trainerId
          in: path
          description: ID of Trainer to delete
          required: true
          schema:
            type: string
            description: MongoDB ObjectID as a hexadecimal string.
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid input
        "404":
          description: Trainer not found
        "500":
          description: "Error Deleting Trainer: Internal Server Error"
  /workshop/:
    get:
      tags:
        - workshopRequest
      summary: Get all workshop requests
      description: Get all workshop requests
      operationId: getWorkshopRequests
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkshopRequest"
        "500":
          description: "Error Retrieving Workshops: Internal Server Error"
      # security: [] (authentication required for admin)
  /workshop/get/{workshopId}:
    get:
      tags:
        - workshopRequest
      summary: Get a workshop request by ID
      description: Get a workshop request by ID
      operationId: getWorkshopRequestById
      parameters:
        - name: workshopId
          in: path
          description: ID of WorkshopRequest to return
          required: true
          schema:
            type: string
            description: MongoDB ObjectID as a hexadecimal string.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkshopRequest"
        "400":
          description: Invalid ID supplied
        "404":
          description: Workshop not found
        "500":
          description: "Error Retrieving Workshop: Internal Server Error"
      # security: [] (authentication required for admin, trainer and client)
  /workshop/add/:
    post:
      tags:
        - workshopRequest
      summary: Add a new workshop request
      description: Add a new workshop request
      operationId: createWorkshopRequest
      requestBody:
        description: Create a new workshop request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkshopRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WorkshopRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WorkshopRequest"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkshopRequest"
            application/xml:
              schema:
                $ref: "#/components/schemas/WorkshopRequest"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        "500":
          description: "Error Creating Workshop: Internal Server Error"
      # security: [] (authentication required for admin and client)
  /workshop/update/{workshopId}:
    put:
      tags:
        - workshopRequest
      summary: Update a workshop request by ID
      description: Update a workshop request by ID
      operationId: updateWorkshopRequest
      parameters:
        - name: workshopId
          in: path
          description: ID of WorkshopRequest to update
          required: true
          schema:
            type: string
            description: MongoDB ObjectID as a hexadecimal string.
      requestBody:
        description: Update an existent workshop request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkshopRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WorkshopRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WorkshopRequest"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkshopRequest"
            application/xml:
              schema:
                $ref: "#/components/schemas/WorkshopRequest"
        "400":
          description: Invalid input
        "404":
          description: Workshop not found
        "422":
          description: Validation exception
        "500":
          description: "Error Updating Workshop: Internal Server Error"
      # security: [] (authentication required for admin)
  /workshop/delete/{workshopId}:
    delete:
      tags:
        - workshopRequest
      summary: Delete a workshop request by ID
      description: Delete a workshop request by ID
      operationId: deleteWorkshopRequest
      parameters:
        - name: workshopId
          in: path
          description: ID of WorkshopRequest to delete
          required: true
          schema:
            type: string
            description: MongoDB ObjectID as a hexadecimal string.
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid input
        "404":
          description: Workshop not found
        "500":
          description: "Error Deleting Workshop: Internal Server Error"
      # security: [] (authentication required for admin)
  /leaveRequest/:
    get:
      tags:
        - leaveRequest
      summary: Get all leave requests
      description: Get all leave requests
      operationId: getLeaveRequests
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LeaveRequest"
        "500":
          description: "Error Retrieving Leaves: Internal Server Error"
      # security: [] (authentication required for admin)
  /leaveRequest/add/:
    post:
      tags:
        - leaveRequest
      summary: Add a new leave request
      description: Add a new leave request
      operationId: createLeaveRequest
      requestBody:
        description: Create a new leave request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeaveRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/LeaveRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LeaveRequest"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeaveRequest"
            application/xml:
              schema:
                $ref: "#/components/schemas/LeaveRequest"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        "500":
          description: "Error Creating Leave: Internal Server Error"
      # security: [] (authentication required for admin and trainer)
  /leaveRequest/update/{leaveId}:
    put:
      tags:
        - leaveRequest
      summary: Update a leave request by ID
      description: Update a leave request by ID
      operationId: updateLeaveRequest
      parameters:
        - name: leaveId
          in: path
          description: ID of LeaveRequest to update
          required: true
          schema:
            type: string
            description: MongoDB ObjectID as a hexadecimal string.
      requestBody:
        description: Update an existent leave request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeaveRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/LeaveRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LeaveRequest"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeaveRequest"
            application/xml:
              schema:
                $ref: "#/components/schemas/LeaveRequest"
        "400":
          description: Invalid input
        "404":
          description: Leave request not found
        "422":
          description: Validation exception
        "500":
          description: "Error Updating Leave: Internal Server Error"
      # security: [] (authentication required for admin and trainer)
  /leaveRequest/delete/{leaveId}:
    delete:
      tags:
        - leaveRequest
      summary: Delete a leave request by ID
      description: Delete a leave request by ID
      operationId: deleteLeaveRequest
      parameters:
        - name: leaveId
          in: path
          description: ID of LeaveRequest to delete
          required: true
          schema:
            type: string
            description: MongoDB ObjectID as a hexadecimal string.
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid input
        "404":
          description: Leave request not found
        "500":
          description: "Error Deleting Leave: Internal Server Error"
      # security: [] (authentication required for admin and trainer)

components:
  schemas:
    Admin:
      type: object
      properties:
        _id:
          type: string
          example: 668d5ba4a5f8eca9ff47283e
          description: MongoDB ObjectID as a hexadecimal string.
        username:
          type: string
          example: theAdmin
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: "12345"
          description: Password is hashed before storing in the database.
        role:
          type: string
          example: admin
          enum:
            - admin
            - trainer
            - client
      xml:
        name: admin
    Client:
      type: object
      properties:
        _id:
          type: string
          example: 668d5ba4a5f8eca9ff47283e
          description: MongoDB ObjectID as a hexadecimal string.
        username:
          type: string
          example: theClient
        firstName:
          type: string
          example: Lewis
        lastName:
          type: string
          example: Hamilton
        email:
          type: string
          example: lewis@example.com
        password:
          type: string
          example: "12345"
          description: Password is hashed before storing in the database.
        role:
          type: string
          example: client
          enum:
            - admin
            - trainer
            - client
      xml:
        name: client
    Trainer:
      type: object
      properties:
        _id:
          type: string
          example: 668d5ba4a5f8eca9ff47283e
          description: MongoDB ObjectID as a hexadecimal string.
        username:
          type: string
          example: theTrainer
        firstName:
          type: string
          example: Sebastian
        lastName:
          type: string
          example: Vettel
        email:
          type: string
          example: sebastian@example.com
        password:
          type: string
          example: "12345"
          description: Password is hashed before storing in the database.
        role:
          type: string
          example: trainer
          enum:
            - admin
            - trainer
            - client
        workshops:
          type: array
          xml:
            name: workshops
            wrapped: true
          items:
            $ref: "#/components/schemas/WorkshopRequest"
        leaveRequests:
          type: array
          xml:
            name: leaveRequests
            wrapped: true
          items:
            $ref: "#/components/schemas/LeaveRequest"
        status:
          type: string
          example: available
          enum:
            - available
            - unavailable
            - onLeave
            - onWorkshop
      xml:
        name: trainer
    WorkshopRequest:
      type: object
      properties:
        _id:
          type: string
          example: 668d5ba4a5f8eca9ff47283e
          description: MongoDB ObjectID as a hexadecimal string.
        name:
          type: string
          example: Introduction to Dell Technologies
        description:
          type: string
          example: "Workshop about Introduction to Artificial Intelligence and Machine Learning."
        startDate:
          type: string
          example: 12th July 2024
          description: Moment.js object for the start date of the workshop.
        endDate:
          type: string
          example: 14th July 2024
          description: Moment.js object for the end date of the workshop.
        location:
          type: string
          example: Local/Overseas
        timeStart:
          type: string
          example: 9:00 AM
          description: Moment.js object for the start time of the workshop.
        timeEnd:
          type: string
          example: 5:00 PM
          description: Moment.js object for the end time of the workshop.
        duration:
          type: integer
          example: 10
          description: Difference of days between the start and end date of the workshop.
        status:
          type: string
          example: pending
          default: pending
          enum:
            - pending
            - approved
            - rejected
        type:
          type: string
          example: workshop
          enum:
            - workshop
            - recreational
            - talks
            - educational
        maxParticipants:
          type: integer
          example: 20
        client:
          $ref: "#/components/schemas/Client"
        Trainer:
          $ref: "#/components/schemas/Trainer"
      xml:
        name: workshop
    LeaveRequest:
      type: object
      properties:
        _id:
          type: string
          example: 668d5ba4a5f8eca9ff47283e
          description: MongoDB ObjectID as a hexadecimal string.
        trainer:
          $ref: "#/components/schemas/Trainer"
        startDate:
          type: string
          example: 12th July 2024
          description: Moment.js object for the start date of the leave.
        endDate:
          type: string
          example: 14th July 2024
          description: Moment.js object for the end date of the leave.
        duration:
          type: integer
          example: 2
          default: 0
          description: Difference of days between the start and end date of the leave.
        status:
          type: string
          example: pending
          default: pending
          enum:
            - pending
            - approved
            - rejected
        type:
          type: string
          example: Annual Leave
          default: leave
          enum:
            - annual
            - medical
            - emergency
            - childcare
            - maternity
            - paternity
            - unpaid
            - compassionate
        reason:
          type: string
          example: "Going on a holiday!"
      xml:
        name: leaveRequest
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
